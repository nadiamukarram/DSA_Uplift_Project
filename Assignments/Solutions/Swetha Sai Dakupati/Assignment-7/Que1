/******************************************************************************

Question 1
Given an i/p array where every element occurs three times, except one element which occurs only once . Find that element

I/P:
4 3 5 5 4 4 5

O/P:
3

Time : O(n)

We can also use set of ordered maps
*******************************************************************************/
#include <iostream>
#include<climits>
using namespace std;

int
main ()
{
  int n;
  cin >> n;
  int arr[n], i;
  for (i = 0; i < n; i++)
    cin >> arr[i];
  int three_n = INT_MAX;
  int three_n1 = 0;		// of the form 3n+1
  int three_n2 = 0;		//of the form 3n+2
  for (i = 0; i < n; i++)
    {
      int common1_three_n = three_n & arr[i];	//common 1's in 3*n and arr element
      int common1_three_n1 = three_n1 & arr[i];
      int common1_three_n2 = three_n2 & arr[i];
      three_n = three_n & (~common1_three_n);	// removing or making zero at places of 1's from common1_three_n in 3n
      three_n1 = three_n1 | common1_three_n;	// changing  to the one's in 3n+1 from common1_three_n1 

      three_n1 = three_n1 & (~common1_three_n1);
      three_n2 = three_n2 | common1_three_n1;

      three_n2 = three_n2 & (~common1_three_n2);
      three_n = three_n | common1_three_n2;
    }
  cout << three_n1;
  return 0;
}
