/*
Given an array arr[] of N integers. Find the contiguous sub-array with maximum sum
Hint: Kadaneâ€™s Algorithm
I/P:
8
-2 -3 4 -1 -2 1 5 -3
O/P:
7   */

#include<iostream>
using namespace std;

int maxSubarraySum(int a[], int n)
{    
    int curr_sum = 0;
    int max_sum = INT16_MIN;
    for(int i=0; i<n; i++)
    {
        curr_sum += a[i];
        if(curr_sum < 0)
            curr_sum = 0;
        max_sum = max(max_sum, curr_sum);
    }
    return max_sum; 
}

int main()
{
    int a[] = {-2, -3, 4, -1, -2, 1, 5, -3};
    int n = sizeof(a)/sizeof(a[0]);

    int max_Sum =maxSubarraySum(a,n);

    cout<<"Maximum sum for contiguous subarray is: "<<max_Sum;
}
