GeeksForGeeks
1. 
class Solution{
public:	
    void swapp(int *a,int *b)
    {
        int t =*a;
        *a=*b;
        *b=t;
    }
	// swap k'th element from beginning and end
	void swapKth(int *arr, int n, int k) {

      swapp(&arr[k-1],&arr[n-k]);

	}
};
-------------------------------------------------------------
2.
class Solution{
public:
	int countZeros(vector<vector<int>>a)
	{   int n=a.size();
		int row=n-1,col=0;
		int count=0;
		while(col<n)
		{
		    while(a[row][col])
		    {   row--;
		        if(row<0)return count;
		    }
		        count += row+1;
		        col++;
		        
		    
		}
		return count;
	}
};
--------------------------------------------------------------
3. 
//using custom merge sort
class Solution{
    public:
    void merge(int arr[], int l, int m, int r)
  {
    int n1 = m - l + 1;
    int n2 = r - m;
 
    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0;
    int j = 0;
    int k = l;
 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
 
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
 
void mergeSort(int arr[],int l,int r){
    if(l>=r){
        return;
    }
    int m =l+ (r-l)/2;
    mergeSort(arr,l,m);
    mergeSort(arr,m+1,r);
    merge(arr,l,m,r);
}
vector<int> findElements(int a[], int n)
        {  mergeSort(a,0,n-1);
           vector<int> ans;
           for(int i=0;i<n-2;i++)
           {
               ans.push_back(a[i]);
           
           }
           return ans;
        }
};

// using stl sort
class Solution{
    public:
vector<int> findElements(int a[], int n)
        {
           sort(&a[0],&a[n]);
           vector<int> ans;
           for(int i=0;i<n-2;i++)
           {
               ans.push_back(a[i]);
           
           }
           return ans;
        }
};
-----------------------------------------------------------------
4.
class Solution
{
  public:
    string modify (string s)
    {   
        int c=0;
        for(int i=0;i<s.length();i++)
        {
            if(s[i]!=' ')
            {
                s[c]=s[i];
                c++;
            }
        }
        for(int i=c;i<s.length();i++)
        {
            s[i]='\0';
        }
        return s;
    }
};
-------------------------------------------------------------
6.
class Solution{   
public:
    string oddEven(int N){
        // code here
        if(N&1==1)return"odd";
        else return"even";
    }
};
----------------------------------------------------------------
