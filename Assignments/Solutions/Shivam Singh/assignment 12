//  https://www.interviewbit.com/problems/first-missing-integer/

int Solution::firstMissingPositive(vector<int> &A)
{
    int n = A.size();
    int j = 0;
    for (int i = 0; i < n; i++)
    {
        if (A[i] <= 0)
        {
            swap(A[i], A[j]);
            j++;
        }
    }
    for (int i = j; i < n; i++)
    {
        if (abs(A[i]) + j - 1 >= 0 && abs(A[i]) + j - 1 < n)
        {
            if (A[abs(A[i]) + j - 1] > 0)
                A[abs(A[i]) + j - 1] = -A[abs(A[i]) + j - 1];
        }
    }
    for (int i = j; i < n; i++)
    {
        if (A[i] > 0)
            return (i - j + 1);
    }
    return (n - j + 1);
}




















//  https://www.interviewbit.com/problems/min-steps-in-infinite-grid/

int Solution::coverPoints(vector<int> &x, vector<int> &y)
{
    int n = x.size(), ans = 0;
    for (int i = 0; i < n - 1; i++)
    {
        if (abs(x[i] - x[i + 1]) <= abs(y[i] - y[i + 1]))
            ans += abs(y[i] - y[i + 1]);
        else
        {
            ans += abs(x[i] - x[i + 1]);
        }
    }
    return ans;
}













// https://www.interviewbit.com/problems/excel-column-number/

int Solution::titleToNumber(string A)
{
    int x = 0;
    for (int i = 0; i < A.size(); i++)
    {
        x = x * 26 + (A[i] - 'A' + 1);
    }
    return x;
}













//  https://www.interviewbit.com/problems/trailing-zeros-in-factorial/
/**
 * @input A : Integer
 * 
 * @Output Integer
 */
int trailingZeroes(int A)
{
    int x = 0;
    while (A / 5 > 0)
    {
        x += (A / 5);
        A /= 5;
    }
    return x;
}
















//  https://www.interviewbit.com/problems/square-root-of-integer/

int Solution::sqrt(int A)
{
    if (A == 0)
        return 0;
    int start = 1, end = A, ans;
    while (start <= end)
    {
        int m = (start + end) / 2;
        if (m <= A / m)
        {
            start = m + 1;
            ans = m;
        }
        else
            end = m - 1;
    }
    return ans;
}




















//  https://www.interviewbit.com/problems/roman-to-integer/

int rc(char a)
{
    switch (a)
    {
    case 'X':
        return 10;
    case 'I':
        return 1;
    case 'V':
        return 5;
    case 'L':
        return 50;
    case 'M':
        return 1000;
    case 'C':
        return 100;
    case 'D':
        return 500;
    default:
        return 0;
    }
}











int Solution::romanToInt(string A)
{
    int x = 0;
    for (int i = 0; i < A.size(); i++)
    {
        int j = A[i], k = 0;
        if (i < A.size() - 1)
            k = A[i + 1];
        if (rc(A[i + 1]) > rc(A[i]) && i < A.size() - 1)
        {
            x += rc(A[i + 1]);
            x -= rc(A[i]);
            i++;
        }
        else
        {
            x += rc(A[i]);
        }
    }
    return x;
}














// https://www.interviewbit.com/problems/min-xor-value/

int Solution::findMinXor(vector<int> &A)
{
    int x = INT_MAX;
    int s;
    sort(A.begin(), A.end());
    for (int i = 0; i < A.size() - 1; i++)
    {
        s = A[i] ^ A[i + 1];
        if (s < x)
            x = s;
    }
    return x;
}

























